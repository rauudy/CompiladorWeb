
Import + Constructor + Export 
cli(171): generator.generate(settings)
  jison(959): code = this.generateModuleCore(opt);
    jison(1021): this.lexer.generateModuleCore()
      jison(146): function RegExpLexer (dict, input, tokens, config = {}) {
        generateModuleCore: function () { return generateModuleCore(lexerText, opts); },

Needs trim

t-rl(341): var lexer = new RegExpLexer(dict, input, tokens);
  rl(152): var code = "const [exports, require] = arguments;\n"
        + generateFromOpts(lexerText, Object.assign({bare: true}, opts));
    rl(203): code = generateModule(lexer, opt);

FAIL

test-regexplexer(362): var lexerSource = RegExpLexer.generate(dict);
  regexp-lexer(168): return generateFromOpts(lexerText, opt);
    rl(203): code = generateModule(lexer, opt);
      rl(270): return "(" + generateModuleFunction(lexer, opt, templateParm) + ")();";
        rl(228): return "function(){\n" + generateModuleCore(lexer, opt, templateParm) + "\n}";


t-rl(385): var lexerSource = lexer_.generateModule();
  jison(145): generateModule: function () { return generateModule(lexerText, opts); },
    rl(270): return "(" + generateModuleFunction(lexer, opt, templateParm) + ")();";


