Import: import { JisonParser, JisonParserApi, StateType, SymbolsType, TerminalsType, ProductionsType, o } from '@ts-jison/parser';

Constructor: |
  const {{STATE_TABLE_FACTORS}};

  export class {{NAME}}Parser extends JisonParser implements JisonParserApi {
      $?: any;
  
      constructor (yy = {}, lexer = new {{NAME}}Lexer(yy)) {
        super(yy, lexer);
      }
  
      symbols_: SymbolsType = {{STATE_NAMES}};
      terminals_: TerminalsType = {{TERMINALS}};
      productions_: ProductionsType = {{PRODUCTIONS}};
      table: Array<StateType> = {{STATE_TABLE}};
      defaultActions: {[key:number]: any} = {{DEFAULT_ACTIONS}};
  
      performAction (yytext:string, yyleng:number, yylineno:number, yy:any, yystate:number /* action[1] */, $$:any /* vstack */, _$:any /* lstack */{{PARSE_PARAMS}}): any {
  /* this == yyval */
  {{ACTION_INCLUDE}}          var $0 = $$.length - 1;
          switch (yystate) {
  {{STATE_ACTIONS}}
          }
      }
  }

Export: ''

ParseError: |
  function parseError (str: string, hash: {[key: string]: any}): void {
      if (hash.recoverable) {
          this.trace(str);
      } else {
          var error = new Error(str);
          (<any>error).hash = hash;
          throw error;
      }
  }
