"use strict";
/* parser generated by jison 0.1.0 */
/**
 * Returns a Parser implementing JisonParserApi and a Lexer implementing JisonLexerApi.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
exports.__esModule = true;
exports.TsCalcLexer = exports.TsCalcParser = void 0;
function hexlify(str) {
    return str.split('')
        .map(function (ch) { return '0x' + ch.charCodeAt(0).toString(16); })
        .join(', ');
}
var parser_1 = require("@ts-jison/parser");
var $V0 = [1, 3], $V1 = [1, 4], $V2 = [1, 5], $V3 = [1, 6], $V4 = [1, 7], $V5 = [1, 9], $V6 = [1, 10], $V7 = [1, 11], $V8 = [1, 12], $V9 = [1, 13], $Va = [1, 14], $Vb = [1, 15], $Vc = [5, 6, 7, 8, 9, 10, 11, 12, 14], $Vd = [5, 6, 7, 14], $Ve = [5, 6, 7, 8, 9, 14];
var TsCalcParser = /** @class */ (function (_super) {
    __extends(TsCalcParser, _super);
    function TsCalcParser(yy, lexer) {
        if (yy === void 0) { yy = {}; }
        if (lexer === void 0) { lexer = new TsCalcLexer(yy); }
        var _this = _super.call(this, yy, lexer) || this;
        _this.symbols_ = { "error": 2, "expressions": 3, "e": 4, "EOF": 5, "+": 6, "-": 7, "*": 8, "/": 9, "^": 10, "!": 11, "%": 12, "(": 13, ")": 14, "NUMBER": 15, "E": 16, "PI": 17, "$accept": 0, "$end": 1 };
        _this.terminals_ = { 2: "error", 5: "EOF", 6: "+", 7: "-", 8: "*", 9: "/", 10: "^", 11: "!", 12: "%", 13: "(", 14: ")", 15: "NUMBER", 16: "E", 17: "PI" };
        _this.productions_ = [0, [3, 2], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 2], [4, 2], [4, 2], [4, 3], [4, 1], [4, 1], [4, 1]];
        _this.table = [{ 3: 1, 4: 2, 7: $V0, 13: $V1, 15: $V2, 16: $V3, 17: $V4 }, { 1: [3] }, { 5: [1, 8], 6: $V5, 7: $V6, 8: $V7, 9: $V8, 10: $V9, 11: $Va, 12: $Vb }, { 4: 16, 7: $V0, 13: $V1, 15: $V2, 16: $V3, 17: $V4 }, { 4: 17, 7: $V0, 13: $V1, 15: $V2, 16: $V3, 17: $V4 }, parser_1.o($Vc, [2, 11]), parser_1.o($Vc, [2, 12]), parser_1.o($Vc, [2, 13]), { 1: [2, 1] }, { 4: 18, 7: $V0, 13: $V1, 15: $V2, 16: $V3, 17: $V4 }, { 4: 19, 7: $V0, 13: $V1, 15: $V2, 16: $V3, 17: $V4 }, { 4: 20, 7: $V0, 13: $V1, 15: $V2, 16: $V3, 17: $V4 }, { 4: 21, 7: $V0, 13: $V1, 15: $V2, 16: $V3, 17: $V4 }, { 4: 22, 7: $V0, 13: $V1, 15: $V2, 16: $V3, 17: $V4 }, parser_1.o($Vc, [2, 7]), parser_1.o($Vc, [2, 8]), parser_1.o($Vc, [2, 9]), { 6: $V5, 7: $V6, 8: $V7, 9: $V8, 10: $V9, 11: $Va, 12: $Vb, 14: [1, 23] }, parser_1.o($Vd, [2, 2], { 8: $V7, 9: $V8, 10: $V9, 11: $Va, 12: $Vb }), parser_1.o($Vd, [2, 3], { 8: $V7, 9: $V8, 10: $V9, 11: $Va, 12: $Vb }), parser_1.o($Ve, [2, 4], { 10: $V9, 11: $Va, 12: $Vb }), parser_1.o($Ve, [2, 5], { 10: $V9, 11: $Va, 12: $Vb }), parser_1.o([5, 6, 7, 8, 9, 10, 14], [2, 6], { 11: $Va, 12: $Vb }), parser_1.o($Vc, [2, 10])];
        _this.defaultActions = { 8: [2, 1] };
        return _this;
    }
    TsCalcParser.prototype.performAction = function (yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
        /* this == yyval */
        var $0 = $$.length - 1;
        switch (yystate) {
            case 1:
                if (yy.trace)
                    yy.trace('returning', $$[$0 - 1]);
                return $$[$0 - 1];
                break;
            case 2:
                this.$ = $$[$0 - 2] + $$[$0];
                break;
            case 3:
                this.$ = $$[$0 - 2] - $$[$0];
                break;
            case 4:
                this.$ = $$[$0 - 2] * $$[$0];
                break;
            case 5:
                this.$ = $$[$0 - 2] / $$[$0];
                break;
            case 6:
                this.$ = Math.pow($$[$0 - 2], $$[$0]);
                break;
            case 7:
                this.$ = (function fact(n) { return n == 0 ? 1 : fact(n - 1) * n; })($$[$0 - 1]);
                break;
            case 8:
                this.$ = $$[$0 - 1] / 100;
                break;
            case 9:
                this.$ = -$$[$0];
                break;
            case 10:
                this.$ = $$[$0 - 1];
                break;
            case 11:
                this.$ = Number(yytext);
                break;
            case 12:
                this.$ = Math.E;
                break;
            case 13:
                this.$ = Math.PI;
                break;
        }
    };
    return TsCalcParser;
}(parser_1.JisonParser));
exports.TsCalcParser = TsCalcParser;
/* generated by ts-jison-lex 0.1.0 */
var lexer_1 = require("@ts-jison/lexer");
var TsCalcLexer = /** @class */ (function (_super) {
    __extends(TsCalcLexer, _super);
    function TsCalcLexer(yy) {
        if (yy === void 0) { yy = {}; }
        var _this = _super.call(this, yy) || this;
        _this.options = { "moduleName": "TsCalc" };
        _this.rules = [/^(?:\s+)/, /^(?:[0-9]+(\.[0-9]+)?\b)/, /^(?:\*)/, /^(?:\/)/, /^(?:-)/, /^(?:\+)/, /^(?:\^)/, /^(?:!)/, /^(?:%)/, /^(?:\()/, /^(?:\))/, /^(?:PI\b)/, /^(?:E\b)/, /^(?:$)/, /^(?:.)/];
        _this.conditions = { "INITIAL": { "rules": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], "inclusive": true } };
        return _this;
    }
    TsCalcLexer.prototype.performAction = function (yy, yy_, $avoiding_name_collisions, YY_START) {
        var YYSTATE = YY_START;
        switch ($avoiding_name_collisions) {
            case 0:
                if (yy.trace)
                    yy.trace("skipping whitespace " + hexlify(yy_.yytext));
                break;
            case 1: return 15;
            case 2: return 8;
            case 3: return 9;
            case 4: return 7;
            case 5: return 6;
            case 6: return 10;
            case 7: return 11;
            case 8: return 12;
            case 9: return 13;
            case 10: return 14;
            case 11: return 17;
            case 12: return 16;
            case 13: return 5;
            case 14: return 'INVALID';
        }
    };
    return TsCalcLexer;
}(lexer_1.JisonLexer));
exports.TsCalcLexer = TsCalcLexer;
