const {RegexpParser} = require('../lib/regexp-parser');

const {RegexpAtom} = require('../lib/RegexpAtom');
const {RegexpAtomToJs} = require('../lib/RegexpAtomToStringVisitor');

function stringifyRules (ret) {
  if ('macros' in ret)
    for (const label in ret.macros)
      ret.macros[label] = RegexpAtomToJs.serialize(ret.macros[label], 'preserve', true);
  if ('rules' in ret)
    ret.rules = ret.rules.map(
      rule => ({
        start: rule.start,
        pattern: rule.pattern ? RegexpAtomToJs.serialize(rule.pattern, 'preserve', true) : undefined,
        action: rule.action,
      })
    );
  return ret;
}

const G = {
  capture: "capture", simplify: "simplify", preserve: "preserve"
};

function test (input, g, output) {
  it(g + ' ' + input, () => {
    expect(RegexpAtomToJs.serialize(new RegexpParser().parse(input), g, false)).toBe(output);
  });
}

describe('RegexpAtomToStringVisitor', () => {
  test("[a-zA-Z][a-zA-Z0-9]+", G.preserve, "[a-zA-Z][a-zA-Z0-9]+");
  test("(([a-zA-Z])([a-zA-Z0-9]+))", G.preserve, "(?:(?:[a-zA-Z])(?:[a-zA-Z0-9]+))");
  test("([a-zA-Z][a-zA-Z0-9])+", G.preserve, "(?:[a-zA-Z][a-zA-Z0-9])+");
  test("[a-zA-Z][a-zA-Z0-9]+", G.capture, "[a-zA-Z][a-zA-Z0-9]+");
  test("(([a-zA-Z])([a-zA-Z0-9]+))", G.capture, "(([a-zA-Z])([a-zA-Z0-9]+))");
  test("([a-zA-Z][a-zA-Z0-9])+", G.capture, "([a-zA-Z][a-zA-Z0-9])+");
  test("[a-zA-Z][a-zA-Z0-9]+", G.simplify, "[a-zA-Z][a-zA-Z0-9]+");
  test("(([a-zA-Z])([a-zA-Z0-9]+))", G.simplify, "[a-zA-Z][a-zA-Z0-9]+");
  test("([a-zA-Z][a-zA-Z0-9])+", G.simplify, "([a-zA-Z][a-zA-Z0-9])+");
});
