function void multiPlicacionPorSumas(m: int, n: int){
    echo "--------------------------------------------------------";
    echo "Multiplicacion de dos numeros por sumas sucesivas";

    let total: int = 0;

    if ((m != 0) && (n != 0)) {
        for (let i: int = 0; i < n; i++) {
            total = total + m;
        };
    };

    echo "" + m + " x " + n + " = " + total;

};

function void CiclosWhile(){
    echo "--------------------------------------------------------";
    echo "--------------------- CICLO WHILE ----------------------";
    FactorialIterativo(7);
    Piramide();
};

function void FactorialIterativo(n2: int){
    let numeroFactorial: int = n2;
    while (numeroFactorial > -1) {
        let fact: int = 1;
        let cadena1: string = "El factorial de: " + numeroFactorial + " = ";
        if (numeroFactorial != 0) {
            let i: int = numeroFactorial;
            while (i > 0) {
                fact = fact * i;
                cadena1 = cadena1 + i;
                if (i > 1) {
                    cadena1 = cadena1 + " * ";

                } else {
                    cadena1 = cadena1 + " = ";
                };
                i--;
            };
        };
        cadena1 = cadena1 + fact;
        echo cadena1;
        numeroFactorial--;
    };
};

function void Piramide(){
    let n:int = 10;
    let piramide: string = "";
    let i: int = 1;
    while (i <= n) {
        let linea: string = "";
        let j: int = 1;
        while (j < n - i) {
            linea = linea + " ";
            j++;
        };
        let k: int = 1;
        while (k <= (2 * i - 1)) {
            if (k <= i) {
              linea = linea + toString(k);
            } else if ((k > i) && (k < (2 * i - 1))) {
                linea = linea + (2 * i - k);
            } else if (k == (2 * i - 1)) {
                linea = linea + 1;
            } else {
                break;
            };

            if (k < (2 * i - 1)) {
                linea = linea + " ";
            };
            k++;
        };
        piramide = piramide + linea + "\n";
        i++;
    };
    echo piramide;
};

function void corazon(n: int){
    let cadenaFigura: string = "";
    let i: int;
    for (i = CAST((-3 * n) / 2 AS int); i <= n; i++) {
        cadenaFigura = "";
        let j: int;
        for (j = CAST((-3 * n) / 2 AS int); j <= 3 * n / 2; j++) {
            let absolutoi: int = i;
            let absolutoj: int = j;
            //obtenemos el valor absoluto de i y j
            if (i < 0) {
                absolutoi = -i;
            };
            if (j < 0) {
                absolutoj = -j;
            };

            if ((absolutoi + absolutoj < n)
                || ((-n / 2 - i) * (-n / 2 - i) + (n / 2 - j) * (n / 2 - j) <= n * n / 2)
                || ((-n / 2 - i) * (-n / 2 - i) + (-n / 2 - j) * (-n / 2 - j) <= n * n / 2)) {
                cadenaFigura = cadenaFigura + "* ";
            } else {
                cadenaFigura = cadenaFigura + ". ";
            };
        };
         echo cadenaFigura;

    };

};

function void arbol(){
    let altura: int = 10;
    let ancho: int = 1;
    let cadenaFigura: string = "";
    let c: string = "* ";
    let b: string = "  ";
    for (let i: int = 0; i < altura / 4; i++) {
        for (let k: int = 0; k < altura - i; k++) {
            cadenaFigura = cadenaFigura + b;
        };
        for (let j: int = 0; j < i * 2 + ancho; j++) {
            cadenaFigura = cadenaFigura + c;
        };
        echo cadenaFigura;
        cadenaFigura = "";
    };
    cadenaFigura = "";
    for (let i: int = 0; i < altura / 4; i++) {
        for (let k: int = 0; k < (altura - i) - 2; k++) {
            cadenaFigura = cadenaFigura + b;
        };
        for (let j: int = 0; j < i * 2 + 5; j++) {
            cadenaFigura = cadenaFigura + c;
        };
        echo cadenaFigura;
        cadenaFigura = "";
    };
    cadenaFigura = "";
    for (let i: int = 0; i < altura / 4; i++) {
        for (let k: int = 0; k < (altura - i) - 4; k++) {
            cadenaFigura = cadenaFigura + b;
        };
        for (let j: int = 0; j < i * 2 + 9; j++) {
            cadenaFigura = cadenaFigura + c;
        };
        echo cadenaFigura;
        cadenaFigura = "";
    };
    cadenaFigura = "";
    for (let i: int = 0; i < altura / 4; i++) {
        for (let k: int = 0; k < (altura - i) - 6; k++) {
            cadenaFigura = cadenaFigura + b;
        };
        for (let j: int = 0; j < i * 2 + 13; j++) {
            cadenaFigura = cadenaFigura + c;
        };
        echo cadenaFigura;
        cadenaFigura = "";
    };
    cadenaFigura = "";
    for (let i: int = 0; i < altura / 4; i++) {
        for (let k: int = 0; k < (altura - 2); k++) {
            cadenaFigura = cadenaFigura + b;
        };
        for (let j: int = 0; j < 5; j++) {
            cadenaFigura = cadenaFigura + c;
        };
        echo cadenaFigura;
        cadenaFigura = "";
    };



};

function void CiclosFor(){
    echo "--------------------------------------------------------";
    echo "--------------------- CICLO FOR ------------------------";
    corazon(10);
    arbol();
    //arbol(altura = 10, ancho = 1);
};

function void CicloLoop(){
    echo "--------------------------------------------------------";
    echo "--------------------- CICLO LOOP -----------------------";
    let n: int = 8;
    let reloj: string = "";
    let i: int = n;
    loop{
        let linea: string = "";
        let j: int = n;
        loop{
            linea = linea + " ";
            j--;
            if (!(j > i)) {
                break;
            };
        };
        let k: int = 1;
        loop{
            linea = linea + "*";
            k++;
            if (!(k <= (2 * i - 1))) {
                break;
            };
        };
        reloj = reloj + linea + "\n";
        i--;
        if (!(i >= 1)) {
            break;
        };
    };

    i = 2;
    loop{
        let linea: string = "";
        let j: int = n;
        loop{
            linea = linea + " ";
            j--;
            if (!(j > i)) {
                break;
            };
        };
        let k: int = 1;
        loop{
            linea = linea + "*";
            k++;
            if (!(k <= (2 * i - 1))) {
                break;
            };
        };
        reloj = reloj + linea + "\n";
        i++;
        if (!(i <= n)) {
            break;
        };
    };
    echo reloj;
};

function void Ciclodountil(){
    echo "--------------------------------------------------------";
    echo "-------------------- CICLO DO-UNTIL --------------------";
    echo "--------------------- SWITCH CASE ---------------------";
    let numero: int = 0;
    do {
        switch (numero) {
            case 0:
                CiclosWhile();
                break;
            case 1:
                CiclosFor();
                break;
            case 2:
                CicloLoop();
                break;
            case 3:
                echo "Esto se imprime una vez";
            default:
                echo "Esto se imprime dos veces";
                break;
        };
        numero = numero + 1;
    }until(numero < 5);

};

function void SentenciasTransferencia(){
    echo "--------------------------------------------------------";
    echo "----------------- SENTENCIAS TRANSFERENCIA -------------";
    let k: int = 0;
    while (k < 3) {
        echo "Entramos al ciclo1 con k = " + k;
        let l: int = 0;
        while (l < 3) {
            echo "Entramos al ciclo2 con l = " + l;
            if ((k == 1) && (l == 1)) {                
                break;
                //echo "Hacemos break al ciclo2";
                //echo "Esto no se imprime por el break";
            };
            if ((k == 2) && (l == 1)) {
                echo "Hacemos continue al ciclo2";
                l++;
                continue;
                //echo "Esto no se imprime por el continue";
            };
            l++;
        };
        if ((k == 2) && (l == 2)) {
            break;
            //echo "Hacemos break al ciclo1";
            //echo "Esto no se imprime por el break";
        };
        k++;
    };
};


function int factorial(n: int){
    if ((n == 0) || (n == 1)) {
        return 1;
    };
    return n * factorial(n - 1);
};

let nivell:int = 0;
function void pascal(n: int) {
    echo "Generando nivel " + nivell + " del triÃ¡ngulo de Pascal";    
    if (nivell > n) {
        echo "";
    }else{
        let fila: string = "";
        for (let i: int = 0; i <= nivell; i++) {
            let comb: double = combinaciones(nivell, i);
            fila = fila + comb + " ";
        };
        echo fila;
        nivell = nivell + 1;
        pascal(n, nivell);
    };
};

function double combinaciones(n: int, r: int) {
    let comb: double = factorial(n) / (factorial(r) * factorial(n - r));
    echo "C(" + n + "," + r + ") = " + comb;
    return comb;
};

function void RecursividadBasica(){
    echo "--------------------------------------------------------";
    echo "----------------- RECURSIVIDAD BASICA ------------------";
    const niveles: int = 5;
    pascal(niveles);

};

EJECUTAR principal();

function void principal(){
    echo "--------------------------------------------------------";
    echo "-----------------CALIFICACION ARCHIVO 2-----------------";
    echo "--------------------------------------------------------\n";
    Ciclodountil();
    SentenciasTransferencia();
    RecursividadBasica();
    multiPlicacionPorSumas(7,9);
};

// salida esperada
/*
--------------------------------------------------------
-----------------CALIFICACION ARCHIVO 2-----------------
--------------------------------------------------------

--------------------------------------------------------
-------------------- CICLO DO-UNTIL --------------------
--------------------- SWITCH CASE ---------------------
--------------------------------------------------------
--------------------- CICLO WHILE ----------------------
El factorial de: 7 = 7 * 6 * 5 * 4 * 3 * 2 * 1 = 5040
El factorial de: 6 = 6 * 5 * 4 * 3 * 2 * 1 = 720
El factorial de: 5 = 5 * 4 * 3 * 2 * 1 = 120
El factorial de: 4 = 4 * 3 * 2 * 1 = 24
El factorial de: 3 = 3 * 2 * 1 = 6
El factorial de: 2 = 2 * 1 = 2
El factorial de: 1 = 1 = 1
El factorial de: 0 = 0 = 1
        1
       1 2 1
      1 2 3 2 1
     1 2 3 4 3 2 1
    1 2 3 4 5 4 3 2 1
   1 2 3 4 5 6 5 4 3 2 1
  1 2 3 4 5 6 7 6 5 4 3 2 1
 1 2 3 4 5 6 7 8 7 6 5 4 3 2 1
1 2 3 4 5 6 7 8 9 8 7 6 5 4 3 2 1
1 2 3 4 5 6 7 8 9 10 9 8 7 6 5 4 3 2 1
--------------------------------------------------------
--------------------- CICLO FOR ------------------------
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . * * * . . . . . . . * * * . . . . . . . . . 
. . . . . . . * * * * * * * . . . * * * * * * * . . . . . . . 
. . . . . * * * * * * * * * * * * * * * * * * * * * . . . . . 
. . . . . * * * * * * * * * * * * * * * * * * * * * . . . . . 
. . . . * * * * * * * * * * * * * * * * * * * * * * * . . . . 
. . . . * * * * * * * * * * * * * * * * * * * * * * * . . . . 
. . . * * * * * * * * * * * * * * * * * * * * * * * * * . . . 
. . . * * * * * * * * * * * * * * * * * * * * * * * * * . . . 
. . . * * * * * * * * * * * * * * * * * * * * * * * * * . . . 
. . . . * * * * * * * * * * * * * * * * * * * * * * * . . . . 
. . . . * * * * * * * * * * * * * * * * * * * * * * * . . . . 
. . . . . * * * * * * * * * * * * * * * * * * * * * . . . . . 
. . . . . * * * * * * * * * * * * * * * * * * * * * . . . . . 
. . . . . . . * * * * * * * * * * * * * * * * * . . . . . . . 
. . . . . . . . * * * * * * * * * * * * * * * . . . . . . . . 
. . . . . . . . . * * * * * * * * * * * * * . . . . . . . . . 
. . . . . . . . . . * * * * * * * * * * * . . . . . . . . . . 
. . . . . . . . . . . * * * * * * * * * . . . . . . . . . . . 
. . . . . . . . . . . . * * * * * * * . . . . . . . . . . . . 
. . . . . . . . . . . . . * * * * * . . . . . . . . . . . . . 
. . . . . . . . . . . . . . * * * . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . * . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
                     * 
                  * * * 
                * * * * * 
                * * * * * 
              * * * * * * * 
            * * * * * * * * * 
            * * * * * * * * * 
          * * * * * * * * * * * 
        * * * * * * * * * * * * * 
        * * * * * * * * * * * * * 
      * * * * * * * * * * * * * * * 
    * * * * * * * * * * * * * * * * * 
                * * * * * 
                * * * * * 
                * * * * * 
--------------------------------------------------------
--------------------- CICLO LOOP -----------------------
***************
 *************
  ***********
   *********
    *******
     *****
      ***
       *
      ***
     *****
    *******
   *********
  ***********
 *************
***************
Esto se imprime una vez
Esto se imprime dos veces
Esto se imprime dos veces
--------------------------------------------------------
----------------- SENTENCIAS TRANSFERENCIA -------------
Entramos al ciclo1 con k = 0
Entramos al ciclo2 con l = 0
Entramos al ciclo2 con l = 1
Entramos al ciclo2 con l = 2
Entramos al ciclo1 con k = 1
Entramos al ciclo2 con l = 0
Entramos al ciclo2 con l = 1
Hacemos break al ciclo2
Entramos al ciclo1 con k = 2
Entramos al ciclo2 con l = 0
Entramos al ciclo2 con l = 1
Hacemos continue al ciclo2
Entramos al ciclo2 con l = 2
--------------------------------------------------------
----------------- RECURSIVIDAD BÃSICA ------------------
Generando nivel 0 del triÃ¡ngulo de Pascal
C(0,0) = 1
1 
Generando nivel 1 del triÃ¡ngulo de Pascal
C(1,0) = 1
C(1,1) = 1
1 1 
Generando nivel 2 del triÃ¡ngulo de Pascal
C(2,0) = 1
C(2,1) = 2
C(2,2) = 1
1 2 1 
Generando nivel 3 del triÃ¡ngulo de Pascal
C(3,0) = 1
C(3,1) = 3
C(3,2) = 3
C(3,3) = 1
1 3 3 1 
Generando nivel 4 del triÃ¡ngulo de Pascal
C(4,0) = 1
C(4,1) = 4
C(4,2) = 6
C(4,3) = 4
C(4,4) = 1
1 4 6 4 1 
Generando nivel 5 del triÃ¡ngulo de Pascal
C(5,0) = 1
C(5,1) = 5
C(5,2) = 10
C(5,3) = 10
C(5,4) = 5
C(5,5) = 1
1 5 10 10 5 1 
Generando nivel 6 del triÃ¡ngulo de Pascal
--------------------------------------------------------
Multiplicacion de dos numeros por sumas sucesivas
7 x 9 = 63
*/
