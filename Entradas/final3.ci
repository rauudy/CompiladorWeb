let vextorEntero: int[] = new vector int [20];
vextorEntero[0] = 100;
vextorEntero[1 + 0] = 50;
vextorEntero[2] = 1;
vextorEntero[3] = 150;
vextorEntero[10 - 6] = 70;
vextorEntero[5] = 25;
vextorEntero[6] = 33;
vextorEntero[CAST(70 / 10 AS int)] = 0;
vextorEntero[8] = 81;
vextorEntero[9] = 11;
vextorEntero[100 - 90] = 5;
vextorEntero[11] = 9;
vextorEntero[12] = 7;
vextorEntero[13] = if (true) 77: -100; // debe ser 77
vextorEntero[14] = 57;
vextorEntero[15] = 44;
vextorEntero[16] = 23;
vextorEntero[17] = 10;
vextorEntero[18] = 167;
vextorEntero[19] = 2024;


let entradas: int[][] = [
    [0, 0, 1],
    [1, 1, 0],
    [1, 0, 1],
    [0, 1, 0]
];



let salidas: int[] = [0, 1, 1, 0]; // Etiquetas de salida
let inputSize: int = 3; // tamaño de las entradas
let numEpochs: int = 1000; // numero de iteraciones
let learningRate: double = 0.01; // tasa de aprendizaje
let waights: double[] = new vector double[inputSize]; // pesos


function int FuncionActivacion(sun: double){
    return if (sun >= 0) 1: 0;
};

function void llenarPesos(){
    for (let i: int = 0; i < inputSize; i++) {
        waights[i] = 0.0;
    };
};

// Función para entrenar el perceptrón
function void Entrenamiento() {
    llenarPesos();
    for (let epoch: int = 0; epoch < numEpochs; epoch++) {
        for (let i: int = 0; i < 4; i++) {
            //calcular salida ponderada
            let weightedSum: double = 0.0;
            for (let j: int = 0; j < inputSize; j++) {
                weightedSum = weightedSum + (entradas[i][j] * waights[j]);
            };

            //calcular error
            let predicted: int = FuncionActivacion(weightedSum);
            let error: int = salidas[i] - predicted;

            // actualizar pesos
            for (let j: int = 0; j < inputSize; j++) {
                waights[j] = waights[j] + (learningRate * error * entradas[i][j]);
            };

        };
    };
};

// funcion de prediccion con el percetron entrenado
function int predecir(){
    let input: int[] = [1, 0, 0];
    let weightedSum: double = 0.0;
    for (let i: int = 0; i < inputSize; i++) {
        weightedSum = weightedSum + (input[i] * waights[i]);
    };
    return FuncionActivacion(weightedSum);
};

function void EjecucionPerceptron(){
    Entrenamiento();
    let prediccion: int = predecir();
    echo "Prediccion para [1, 0, 0]: " + prediccion;
};

function void vecctorDoble(){
    echo "--------------------------------------------------------";
    echo "----------------- vecctor 2 DIMENSION -------------------";
    EjecucionPerceptron();
};

function void insertionSort() {
    let n: int = len(vextorEntero);
    for (let i: int = 1; i < n; i++) {
        let key: int = vextorEntero[i];
        let j: int = i - 1;
        while ((j >= 0) && ((vextorEntero[j]) > key)) {
            vextorEntero[j + 1] = vextorEntero[j];
            j = j - 1;
        };
        vextorEntero[j + 1] = key;
    };
};

function void imprimirvecctor() {
    let cadena: string = "[";
    for (let i: int = 0; i < len(vextorEntero); i++) {
        cadena = cadena + toString(vextorEntero[i]) + " ";
    };
    cadena = cadena + "]\n";
    echo cadena;
};

function void vecctorSimple(){
    echo "--------------------------------------------------------";
    echo "----------------- vecctor 1 DIMENSION -------------------";
    echo "vecctor original: ";
    imprimirvecctor();
    insertionSort();
    echo "vecctor ordenado: ";
    imprimirvecctor();
};

function void Caasteos(){
    echo "--------------------------------------------------------";
    echo "----------------------- CASTEOS ------------------------";
    let nttodouble: double = CAST(2024 AS double);
    let oubletoint: int = CAST((61 + (1 / 3)) AS int);
    let nttostring: string = CAST(2024 AS string);
    let nttochar: char = CAST(70 AS char); // F
    let oubletostring: string = CAST(61.1 AS string);
    let hartoint: int = CAST("R" AS int); // 82
    let hartodouble: double = CAST("J" AS double); // 74.0

    echo "inttodouble: " + nttodouble;
    echo "doubletoint: " + oubletoint;
    echo "inttostring: " + nttostring;
    echo "inttochar: " + nttochar;
    echo "doubletostring: " + oubletostring;
    echo "chartoint: " + hartoint;
    echo "chartodouble: " + hartodouble;

    //validaciones
    /*echo nttodouble is double;
    echo oubletoint is int;
    echo nttostring is string;
    echo nttochar is char;
    echo oubletostring is string;
    echo hartoint is int;
    echo hartodouble is double;
    */
};

function void NativasSimples(){
    echo "--------------------------------------------------------";
    echo "--------------------- NATIVA LOWER ---------------------";
    echo lower("SI SALE COMPILADORES 1");

    echo "--------------------------------------------------------";
    echo "--------------------- NATIVA UPPER ---------------------";
    echo upper("si sale compiladores 1");
    
    echo "--------------------------------------------------------";
    echo "--------------------- NATIVA ROUND ---------------------";
    const a: double = 60.0 + (23 / 45); // 60.511111
    const b: double = 59.4 + (4 / 45); // 59.488888
    echo "El numero: " + a + " redondeado es: " + round(a);
    echo "El numero: " + b + " redondeado es: " + round(b);

    // length
    echo "--------------------------------------------------------";
    echo "--------------------- NATIVA LENGTH --------------------";
    let cadena: string = "Hola mundo";
    echo "La longitud de la cadena: " + cadena + " es: " + len(cadena);
    echo "La longitud del vextorEntero es: " + len(vextorEntero);
    echo "La longitud de vecctor entradas es: " + len(entradas);

    //truncate
    echo "--------------------------------------------------------";
    echo "--------------------- NATIVA TRUNCATE ------------------";

    echo "El numero: " + a + " truncado es: " + truncate(a);
    echo "El numero: " + b + " truncado es: " + truncate(b);

    // funcion is
    echo "--------------------------------------------------------";
    echo "--------------------- NATIVA IS ------------------------";
    echo "Es cadena: " + ("Hola" is string);
    echo "Es entero: " + (2024 is int);
    echo "Es double: " + (2024.0 is double);
    echo "Es char: " + ("A" is char);
    echo "Es boolean: " + (true is bool);

    //tostring
    echo "--------------------------------------------------------";
    echo "--------------------- NATIVA TOSTRING ------------------";
    echo "El numero: " + 100 + " convertido a cadena es: " + toString(100);
    echo "El numero: " + 99.9 + " convertido a cadena es: " + toString(99.9);
    echo "El boolean: " + true + " convertido a cadena es: " + toString(true);
    echo "El boolean: " + false + " convertido a cadena es: " + toString(false);

    
};

function void Nativasvecctores(){
    let vecInt: int[] = [10, 30, 15, 5, 2];
    let vecDouble: double[] = [10.0, 30.0, 15.0, 5.0, 2.0];
    let vecChar: char[] = ["F", "R", "C", "A", "M"];
    let vecString: string[] = ["Fabian", "Reyna", "Carlos", "Acabal", "Xhunik", "Miguel"];
    let vecBool: bool[] = [true, false, true, false, true];

    // funcion reverse
    echo "--------------------------------------------------------";
    echo "--------------------- NATIVA REVERSE -------------------";
    // original entero
    let cadenaSalida: string = "[";
    for (let i: int = 0; i < len(vecInt); i++) {
        cadenaSalida = cadenaSalida + toString(vecInt[i]) + " ";
    };
    cadenaSalida = cadenaSalida + "]";
    echo "vecctor original Int: " + cadenaSalida;
    // invertido entero
    cadenaSalida = "[";
    reverse(vecInt);
    for (let i: int = 0; i < len(vecInt); i++) {
        cadenaSalida = cadenaSalida + toString(vecInt[i]) + " ";
    };
    cadenaSalida = cadenaSalida + "]";
    echo "vecctor invertido Int: " + cadenaSalida;
    // original double
    cadenaSalida = "[";
    for (let i: int = 0; i < len(vecDouble); i++) {
        cadenaSalida = cadenaSalida + toString(vecDouble[i]) + " ";
    };
    cadenaSalida = cadenaSalida + "]";
    echo "vecctor original Double: " + cadenaSalida;
    // invertido double
    cadenaSalida = "[";
    reverse(vecDouble);
    for (let i: int = 0; i < len(vecDouble); i++) {
        cadenaSalida = cadenaSalida + toString(vecDouble[i]) + " ";
    };
    cadenaSalida = cadenaSalida + "]";
    echo "vecctor invertido Double: " + cadenaSalida;
    // original char
    cadenaSalida = "[";
    for (let i: int = 0; i < len(vecChar); i++) {
        cadenaSalida = cadenaSalida + toString(vecChar[i]) + " ";
    };
    cadenaSalida = cadenaSalida + "]";
    echo "vecctor original Char: " + cadenaSalida;
    // invertido char
    cadenaSalida = "[";
    reverse(vecChar);
    for (let i: int = 0; i < len(vecChar); i++) {
        cadenaSalida = cadenaSalida + toString(vecChar[i]) + " ";
    };
    cadenaSalida = cadenaSalida + "]";
    echo "vecctor invertido Char: " + cadenaSalida;
    // original string
    cadenaSalida = "[";
    for (let i: int = 0; i < len(vecString); i++) {
        cadenaSalida = cadenaSalida + toString(vecString[i]) + " ";
    };
    cadenaSalida = cadenaSalida + "]";
    echo "vecctor original String: " + cadenaSalida;
    // invertido string
    cadenaSalida = "[";
    reverse(vecString);
    for (let i: int = 0; i < len(vecString); i++) {
        cadenaSalida = cadenaSalida + vecString[i] + " ";
    };
    cadenaSalida = cadenaSalida + "]";
    echo "vecctor invertido String: " + cadenaSalida;
    // original boolean
    cadenaSalida = "[";
    for (let i: int = 0; i < len(vecBool); i++) {
        cadenaSalida = cadenaSalida + toString(vecBool[i]) + " ";
    };
    cadenaSalida = cadenaSalida + "]";
    echo "vecctor original Boolean: " + cadenaSalida;
    // invertido boolean
    cadenaSalida = "[";
    reverse(vecBool);
    for (let i: int = 0; i < len(vecBool); i++) {
        cadenaSalida = cadenaSalida + toString(vecBool[i]) + " ";
    };
    cadenaSalida = cadenaSalida + "]";
    echo "vecctor invertido Boolean: " + cadenaSalida;

    // max
    echo "--------------------------------------------------------";
    echo "--------------------- NATIVA MAX -----------------------";
    echo "Maximo de vecInt: " + max(vecInt);
    echo "Maximo de vecDouble: " + max(vecDouble);
    echo "Maximo de vecChar: " + max(vecChar);
    echo "Maximo de vecString: " + max(vecString);
    echo "Maximo de vecBool: " + max(vecBool);

    // min
    echo "--------------------------------------------------------";
    echo "--------------------- NATIVA MIN -----------------------";
    echo "Minimo de vecInt: " + min(vecInt);
    echo "Minimo de vecDouble: " + min(vecDouble);
    echo "Minimo de vecChar: " + min(vecChar);
    echo "Minimo de vecString: " + min(vecString);
    echo "Minimo de vecBool: " + min(vecBool);

    // sum
    echo "--------------------------------------------------------";
    echo "--------------------- NATIVA SUM -----------------------";
    echo "Suma de vecInt: " + sum(vecInt);
    echo "Suma de vecDouble: " + sum(vecDouble);
    echo "Suma de vecChar: " + sum(vecChar);
    echo "Suma de vecString: " + sum(vecString);
    echo "Suma de vecBool: " + sum(vecBool);

    // average
    echo "--------------------------------------------------------";
    echo "--------------------- NATIVA AVERAGE -------------------";
    echo "Promedio de vecInt: " + average(vecInt);
    echo "Promedio de vecDouble: " + average(vecDouble);
    echo "Promedio de vecChar: " + average(vecChar);
    echo "Promedio de vecBool: " + average(vecBool);

};


function void main(){
    echo "--------------------------------------------------------";
    echo "-----------------CALIFICACION ARCHIVO 3-----------------";
    echo "--------------------------------------------------------\n";
    vecctorSimple();
    vecctorDoble();
    Caasteos();
    NativasSimples();
    Nativasvecctores();
    Recursivas();
};


function void Recursivas(){
    let valorfibonacci: int = 20;
    let valorparimpar: int = 70;
    echo "--------------------------------------------------------";
    echo "--------------------- RECURSIVAS -----------------------\n";

    echo "--------------------------------------------------------";
    echo "--------------------- FIBONACCI ------------------------";
    echo "Fibonacci de " + valorfibonacci + ": " + fibonacci(valorfibonacci) + "\n";


    echo "--------------------------------------------------------";
    echo "--------------------- PAR O IMPAR ----------------------";
    if (par(valorparimpar) == 1) {
        echo "El numero " + valorparimpar + " es par \n";
    } else {
        echo "El numero " + valorparimpar + " es impar \n";
    };

    echo "--------------------------------------------------------";
    echo "--------------------- CONTAR CAMINOS -------------------";
    let m: int = 3;
    let n: int = 3;
    echo "La cantidad de caminos en una cuadricula de " + m + "x" + n + " es: " + contarCaminos(m, n);
    echo "\n";

    echo "--------------------------------------------------------";
    echo "--------------------- ACKERMAN -------------------------";
    m = 3;
    n = 4;
    echo "Funcion de Ackerman (" + m + ", " + n + "): " + ackerman(m, n) + "\n";
    //echo "Funcion de Ackerman con puntos (" + m + ", " + n + "): " + ackermanpuntosmenos(m = m, n = n) + "\n";
};

function int fibonacci(n: int){
    if (n > 1) {
        return fibonacci(n - 1) + fibonacci(n - 2);
    } else if (n == 1) {
        return 1;
    } else if (n == 0) {
        return 0;
    } else {
        echo "Error: n debe ser mayor o igual a 0";
        return 0;
    };
};

function int par(nump: int){
    if (nump == 0) {
        return 1;
    } else {
        return impar(nump - 1);
    };
};

function int impar(numi: int){
    if (numi == 0) {
        return 0;
    } else {
        return par(numi - 1);
    };
};

function int contarCaminos(m: int, n: int){
    if ((m == 1) || (n == 1)) {
        echo "Contar Caminos (" + m + ", " + n + ") = 1";
        return 1;
    } else {
        let resultado: int = contarCaminos(m - 1, n) + contarCaminos(m, n - 1);
        echo "Contar Caminos (" + m + ", " + n + ") = Contar Caminos(" + (m - 1) + ", " + n + ") + Contar Caminos(" + m + ", " + (n - 1) + ") = " + resultado;
        return resultado;
    };
};

function int ackerman(m: int, n: int){
    return if (m == 0) (n + 1) : (if ((m > 0) && (n == 0)) (ackerman(m - 1, 1)) : (ackerman(m - 1, ackerman(m, n - 1))));
};

function int ackermanpuntosmenos(m: int, n: int){
    if (m == 0) {
        return n + 1;
    } else if ((m > 0) && (n == 0)) {
        return ackermanpuntosmenos(m - 1, 1);
    } else {
        return ackermanpuntosmenos(m - 1, ackermanpuntosmenos(m, n - 1));
    };
};

EJECUTAR main();

// salida esperada 
/*
--------------------------------------------------------
-----------------CALIFICACION ARCHIVO 2-----------------
--------------------------------------------------------

--------------------------------------------------------
----------------- vecctor 1 DIMENSION -------------------
vecctor original: 
[100 50 1 150 70 25 33 0 81 11 5 9 7 77 57 44 23 10 167 2024 ]

vecctor ordenado: 
[0 1 5 7 9 10 11 23 25 33 44 50 57 70 77 81 100 150 167 2024 ]

--------------------------------------------------------
----------------- vecctor 2 DIMENSION -------------------
Prediccion para [1, 0, 0]: 1
--------------------------------------------------------
----------------------- CASTEOS ------------------------
inttodouble: 2024.0
doubletoint: 61
inttostring: 2024
inttochar: F
doubletostring: 61.1
chartoint: 82
chartodouble: 74.0
--------------------------------------------------------
--------------------- NATIVA LOWER ---------------------
si sale compiladores 1
--------------------------------------------------------
--------------------- NATIVA UPPER ---------------------
SI SALE COMPILADORES 1
--------------------------------------------------------
--------------------- NATIVA ROUND ---------------------
El numero: 60.511111 redondeado es: 61
El numero: 59.488888 redondeado es: 59
--------------------------------------------------------
--------------------- NATIVA LENGTH ---------------------
La longitud de la cadena: Hola mundo es: 10
La longitud del vextorEntero es: 20
La longitud de vecctor entradas es: 4
--------------------------------------------------------
--------------------- NATIVA TRUNCATE ------------------
El numero: 60.511111 truncado es: 60
El numero: 59.488888 truncado es: 59
--------------------------------------------------------
--------------------- NATIVA IS ------------------------
Es cadena: true
Es entero: true
Es double: true
Es char: true
Es boolean: true
--------------------------------------------------------
--------------------- NATIVA TOSTRING ------------------
El numero: 100 convertido a cadena es: 100
El numero: 99.9 convertido a cadena es: 99.9
El boolean: true convertido a cadena es: true
El boolean: false convertido a cadena es: false
--------------------------------------------------------
--------------------- NATIVA TOCHARARRAY ------------------
[F A B I A N  R E Y N A ]
--------------------------------------------------------
--------------------- NATIVA REVERSE -------------------
vecctor original Int: [10 30 15 5 2 ]
vecctor invertido Int: [2 5 15 30 10 ]
vecctor original Double: [10.0 30.0 15.0 5.0 2.0 ]
vecctor invertido Double: [2.0 5.0 15.0 30.0 10.0 ]
vecctor original Char: [F R C A M ]
vecctor invertido Char: [M A C R F ]
vecctor original String: [Fabian Reyna Carlos Acabal Xhunik Miguel ]
vecctor invertido String: [Miguel Xhunik Acabal Carlos Reyna Fabian ]
vecctor original Boolean: [true false true false true ]
vecctor invertido Boolean: [true false true false true ]
--------------------------------------------------------
--------------------- NATIVA MAX -----------------------
Maximo de vecInt: 30
Maximo de vecDouble: 30.0
Maximo de vecChar: R
Maximo de vecString: Xhunik
Maximo de vecBool: true
--------------------------------------------------------
--------------------- NATIVA MIN -----------------------
Minimo de vecInt: 2
Minimo de vecDouble: 2.0
Minimo de vecChar: A
Minimo de vecString: Acabal
Minimo de vecBool: false
--------------------------------------------------------
--------------------- NATIVA SUM -----------------------
Suma de vecInt: 62
Suma de vecDouble: 62.0
Suma de vecChar: 366
Suma de vecString: FabianReynaCarlosAcabalXhunikMiguel
Suma de vecBool: 3
--------------------------------------------------------
--------------------- NATIVA AVERAGE -------------------
Promedio de vecInt: 12.4
Promedio de vecDouble: 12.4
Promedio de vecChar: 73.2
Promedio de vecBool: 0.6
--------------------------------------------------------
--------------------- RECURSIVAS -----------------------

--------------------------------------------------------
--------------------- FIBONACCI ------------------------
Fibonacci de 20: 6765

--------------------------------------------------------
--------------------- PAR O IMPAR ----------------------
El numero 70 es par

--------------------------------------------------------
--------------------- CONTAR CAMINOS -------------------
Contar Caminos (1, 3) = 1
Contar Caminos (1, 2) = 1
Contar Caminos (2, 1) = 1
Contar Caminos (2, 2) = Contar Caminos(1, 2) + Contar Caminos(2, 1) = 2
Contar Caminos (2, 3) = Contar Caminos(1, 3) + Contar Caminos(2, 2) = 3
Contar Caminos (1, 2) = 1
Contar Caminos (2, 1) = 1
Contar Caminos (2, 2) = Contar Caminos(1, 2) + Contar Caminos(2, 1) = 2
Contar Caminos (3, 1) = 1
Contar Caminos (3, 2) = Contar Caminos(2, 2) + Contar Caminos(3, 1) = 3
Contar Caminos (3, 3) = Contar Caminos(2, 3) + Contar Caminos(3, 2) = 6
La cantidad de caminos en una cuadricula de 3x3 es: 6

La cantidad de caminos en una cuadricula de 3x3 es: 6


--------------------------------------------------------
--------------------- ACKERMAN -------------------------
Funcion de Ackerman (3, 4): 125
*/
